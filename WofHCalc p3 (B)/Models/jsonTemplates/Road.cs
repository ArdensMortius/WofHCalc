// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WofHCalc.Models.jsonTemplates;
//
//    var road = Road.FromJson(jsonString);

namespace WofHCalc.Models.jsonTemplates
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using WofHCalc.Supports;

    public partial class Road
    {
        [JsonProperty("cost")]
        public string Cost { get; set; }

        [JsonProperty("science")]
        public long Science { get; set; }

        [JsonProperty("speed")]
        public double Speed { get; set; }

        [JsonProperty("workers")]
        public long Workers { get; set; }
        public int[] GetResCost()
        {
            var ns = Cost.Split('^', StringSplitOptions.RemoveEmptyEntries);
            var ans = new int[23];
            foreach (string ss in ns)
            {
                int x = convert(ss);
                switch (ss[0])
                {
                    case 'c': ans[(int)ResName.food] = x; break;
                    case 'd': ans[(int)ResName.wood] = x; break;
                    case 'e': ans[(int)ResName.iron] = x; break;
                    case 'f': ans[(int)ResName.fuel] = x; break;
                    case 'g': ans[(int)ResName.stone] = x; break;                                        
                    default: break;
                }
            }
            return ans;
        }
        private int convert(string s)
        {
            string ts = s.Substring(1, s.IndexOf(".") - 1);
            int tr = int.Parse(ts);
            return (int)tr;
        }
    }

    public partial class Road
    {
        public static Road[] FromJson(string json) => JsonConvert.DeserializeObject<Road[]>(json, WofHCalc.Models.jsonTemplates.Converter.Settings);
    }
}
